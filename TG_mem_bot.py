# TG_mem_bot.py
# Telegram –ë–æ—Ç-–ú–µ–º–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (aiogram v3 + g4f) —Å –∫–Ω–æ–ø–∫–∞–º–∏

import os
import asyncio
import tempfile
from typing import Dict, Any, List, Optional

import aiohttp
from dotenv import load_dotenv
from g4f.client import Client

import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
)
from aiogram.enums import ParseMode

# ------------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ------------------------
load_dotenv()
TOKEN_TG: str = os.getenv("TOKEN_TG", "").strip()
if not TOKEN_TG:
    raise RuntimeError("–£–∫–∞–∂–∏ TOKEN_TG –≤ .env")

TEXT_TIMEOUT = int(os.getenv("G4F_TEXT_TIMEOUT", "15"))      # —Å–µ–∫ –Ω–∞ –æ–¥–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
IMAGE_TIMEOUT = int(os.getenv("G4F_IMAGE_TIMEOUT", "20"))    # —Å–µ–∫ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
MAX_HISTORY = 16  # —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 16 –ø–∞—Ä (user/assistant) –Ω–∞ —Ç–µ–º—É

# ------------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------
bot_tg = Bot(token=TOKEN_TG, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
gpt = Client()

# ------------------------ –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ ------------------
# BOT_HISTORY[user_id][theme] -> {"role": {"role": "system", "content": ...}, "messages": [...]}
BOT_HISTORY: Dict[int, Dict[str, Dict[str, Any]]] = {}
# –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TG_CHATS: Dict[int, str] = {}

# ------------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ -----------------------
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üì∏ –ú–µ–º"),
            KeyboardButton(text="üß© –¢–µ–º–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è"),
            KeyboardButton(text="üìù –ù–æ–≤–∞—è —Ä–æ–ª—å"),
        ]],
        resize_keyboard=True
    )

# ======================== –£–¢–ò–õ–ò–¢–´ –ü–ê–ú–Ø–¢–ò ===================
def add_new_role(user_id: int, theme: str, role: str) -> None:
    if user_id not in BOT_HISTORY:
        BOT_HISTORY[user_id] = {}
    if theme not in BOT_HISTORY[user_id]:
        BOT_HISTORY[user_id][theme] = {}
    BOT_HISTORY[user_id][theme]['role'] = {"role": "system", "content": role}


def add_messages(user_id: int, theme: str, prompt: str, answer_ai: str) -> None:
    if user_id not in BOT_HISTORY:
        BOT_HISTORY[user_id] = {}
    if theme not in BOT_HISTORY[user_id]:
        BOT_HISTORY[user_id][theme] = {}
    if 'messages' not in BOT_HISTORY[user_id][theme]:
        BOT_HISTORY[user_id][theme]['messages'] = []
    BOT_HISTORY[user_id][theme]['messages'].append({"role": "user", "content": prompt})
    BOT_HISTORY[user_id][theme]['messages'].append({"role": "assistant", "content": answer_ai})
    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞–ª–∞—Å—å
    msgs = BOT_HISTORY[user_id][theme]['messages']
    limit = MAX_HISTORY * 2  # –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ = 2 —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(msgs) > limit:
        del msgs[: len(msgs) - limit]


def get_role(user_id: int, theme: str) -> Optional[str]:
    if user_id not in BOT_HISTORY:
        return False
    if theme not in BOT_HISTORY[user_id]:
        return False
    if 'role' not in BOT_HISTORY[user_id][theme]:
        return False
    return BOT_HISTORY[user_id][theme]['role']["content"]


def get_messages(user_id: int, theme: str) -> Optional[List[Dict[str, str]]]:
    if user_id not in BOT_HISTORY:
        return False
    if theme not in BOT_HISTORY[user_id]:
        return False
    if 'messages' not in BOT_HISTORY[user_id][theme]:
        return False
    return BOT_HISTORY[user_id][theme]['messages']

# ======================== G4F (—Ç–µ–∫—Å—Ç) ======================
TEXT_MODELS: List[str] = ["gpt-4.1-mini", "mistral", "gpt-4o-mini"]


async def chat_once(messages: List[Dict[str, str]]) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ g4f —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ —Å—Ç—Ä–æ–∫–µ.
    –≠—Ç–æ —Å–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: `messagesX.content did not match any variant of MessageContent`.
    """
    loop = asyncio.get_running_loop()
    last_error = None

    # ‚ñ∫ –ñ—ë—Å—Ç–∫–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ —á–∏—Å—Ç–∏–º None/–ø—É—Å—Ç–æ—Ç—ã
    safe_messages: List[Dict[str, str]] = []
    for m in messages:
        role = str(m.get("role", "user"))
        content = m.get("content", "")
        if content is None:
            content = ""
        content = str(content).strip()
        if content == "":
            content = " "
        safe_messages.append({"role": role, "content": content})

    def _call(model: str) -> str:
        resp = gpt.chat.completions.create(model=model, messages=safe_messages)
        return resp.choices[0].message.content.strip()

    for model in TEXT_MODELS:
        try:
            logging.info(f"g4f.chat via model={model}")
            fut = loop.run_in_executor(None, _call, model)
            return await asyncio.wait_for(fut, timeout=TEXT_TIMEOUT)
        except asyncio.TimeoutError as e:
            last_error = e
            logging.warning(f"g4f timeout on model={model} after {TEXT_TIMEOUT}s")
            continue
        except Exception as e:
            last_error = e
            logging.warning(f"g4f error on model={model}: {e}")
            await asyncio.sleep(0.2)

    raise RuntimeError(f"–í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç–≤–∞–ª–∏–ª–∏—Å—å: {last_error}")


async def just_get_answer(prompt: str) -> str:
    return await chat_once([{"role": "user", "content": prompt}])


async def just_answer_with_role(role: str, prompt: str) -> str:
    return await chat_once([{"role": "system", "content": role}, {"role": "user", "content": prompt}])


async def answer_with_history(history: List[Dict[str, str]], prompt: str) -> str:
    return await chat_once(history + [{"role": "user", "content": prompt}])


async def answer_with_history_and_role(role: str, history: List[Dict[str, str]], prompt: str) -> str:
    return await chat_once([{"role": "system", "content": role}] + history + [{"role": "user", "content": prompt}])

# ======================== G4F (–∫–∞—Ä—Ç–∏–Ω–∫–∞) ===================
async def make_meme_caption(topic: str) -> str:
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–º–∞ –Ω–∞ —Ç–µ–º—É: {topic}. 1 —Ñ—Ä–∞–∑–∞, –±–µ–∑ —ç–º–æ–¥–∑–∏."
    return await just_get_answer(prompt)


async def make_meme_image_url(topic_or_caption: str) -> Optional[str]:
    loop = asyncio.get_running_loop()

    def _gen() -> Optional[str]:
        try:
            resp = gpt.images.generate(
                model="flux",
                prompt=f"–°–æ–∑–¥–∞–π –∑–∞–±–∞–≤–Ω—É—é –º–µ–º-–∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Å—Ç–∏–ª–µ Reaction memes ‚Äî –ª–∏—Ü–æ –∏–ª–∏ —Å—Ü–µ–Ω–∞, –≤—ã—Ä–∞–∂–∞—é—â–∏–µ —ç–º–æ—Ü–∏—é. –ø–æ–¥ –ø–æ–¥–ø–∏—Å—å: {topic_or_caption}",
                response_format="url",
            )
            return resp.data[0].url
        except Exception:
            return None

    fut = loop.run_in_executor(None, _gen)
    try:
        return await asyncio.wait_for(fut, timeout=IMAGE_TIMEOUT)
    except asyncio.TimeoutError:
        logging.warning(f"g4f image timeout after {IMAGE_TIMEOUT}s")
        return None


async def download_to_temp(url: str) -> Optional[str]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=30) as r:
                r.raise_for_status()
                fd, path = tempfile.mkstemp(suffix=".jpg")
                with os.fdopen(fd, "wb") as f:
                    f.write(await r.read())
                return path
    except Exception:
        return None

# ======================== TG‚Äë—Ö–µ–Ω–¥–ª–µ—Ä—ã ======================
async def add_theme_tg(user_id: int, theme: str, message: Message):
    TG_CHATS[user_id] = theme.strip()
    await message.reply("‚úÖ –¢–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


async def change_role_tg(user_id: int, role: str, message: Message):
    if user_id not in TG_CHATS:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π —Ç–µ–º—É: *–û–±—â–µ–Ω–∏–µ: <—Ç–µ–º–∞>*")
        return
    add_new_role(user_id, TG_CHATS[user_id], role.strip())
    await message.reply("üß† –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


async def send_answer_tg(message: Message):
    if message.from_user.id not in TG_CHATS:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π —Ç–µ–º—É: *–û–±—â–µ–Ω–∏–µ: <—Ç–µ–º–∞>*")
        return

    user_text = (message.text or "").strip()
    if not user_text:
        await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôÇ")
        return

    role = get_role(message.from_user.id, TG_CHATS[message.from_user.id])
    history = get_messages(message.from_user.id, TG_CHATS[message.from_user.id])
    theme = TG_CHATS[message.from_user.id]
    effective_role = role or (
        f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–µ–º–∞ –¥–∏–∞–ª–æ–≥–∞: {theme}. "
        f"–û—Ç–≤–µ—á–∞–π –ø–æ —Ç–µ–º–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."
    )
    if not history:
        answer = await just_answer_with_role(effective_role, user_text)
    else:
        answer = await answer_with_history_and_role(effective_role, history, user_text)

    add_messages(message.from_user.id, TG_CHATS[message.from_user.id], user_text, answer)

    answer = (answer or "").strip()
    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

    await message.answer(answer)


async def handle_meme_tg(message: Message, topic: str):
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º‚Ä¶ ‚è≥")
    caption = await make_meme_caption(topic)
    caption = (caption or "").strip() or "–í–æ—Ç —Ç–≤–æ–π –º–µ–º–∞—Å!"
    url = await make_meme_image_url(caption) or await make_meme_image_url(topic)
    if url:
        img_path = await download_to_temp(url)
        if img_path:
            try:
                await message.answer_photo(FSInputFile(img_path), caption=caption)
                os.remove(img_path)
                return
            except Exception:
                pass
    await message.answer(f"{caption}\n\n_(–ö–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)_")

# ======================== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ======================
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ==Member== *–ú–µ–º–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä*.\n"
        "‚Äî –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `–û–±—â–µ–Ω–∏–µ: <—Ç–µ–º–∞>`\n"
        "‚Ä¢ `–†–æ–ª—å: <—Ä–æ–ª—å>`\n"
        "‚Ä¢ `–ú–µ–º: <—Ç–µ–º–∞>`",
        reply_markup=main_kb()
    )


@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "*–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n"
        "‚Ä¢ `–û–±—â–µ–Ω–∏–µ: <—Ç–µ–º–∞>` ‚Äî –∑–∞–¥–∞—Ç—å —Ç–µ–º—É (–≤–∫–ª—é—á–∞–µ—Ç –ø–∞–º—è—Ç—å –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã)\n"
        "‚Ä¢ `–†–æ–ª—å: <—Ä–æ–ª—å>` ‚Äî –∑–∞–¥–∞—Ç—å system‚Äë—Ä–æ–ª—å (—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤)\n"
        "‚Ä¢ `–ú–µ–º: <—Ç–µ–º–∞>` ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚Ä¢ `/clear` ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–º—É",
        reply_markup=main_kb()
    )


@dp.message(Command("clear"))
async def clear_command(message: Message):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–º—ã/–∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    BOT_HISTORY.pop(message.from_user.id, None)
    TG_CHATS.pop(message.from_user.id, None)
    await message.reply("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞, —Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")


@dp.message()
async def router(message: Message):
    text = (message.text or "").strip()
    low = text.lower()

    if low.startswith("–æ–±—â–µ–Ω–∏–µ:"):
        await add_theme_tg(message.from_user.id, text.split(":", 1)[1], message)
    elif low.startswith("—Ä–æ–ª—å:"):
        await change_role_tg(message.from_user.id, text.split(":", 1)[1], message)
    elif low.startswith("–º–µ–º:"):
        topic = text.split(":", 1)[1].strip()
        if topic:
            await handle_meme_tg(message, topic)
        else:
            await message.answer("–§–æ—Ä–º–∞—Ç: `–ú–µ–º: <—Ç–µ–º–∞>`")
    elif text in ("üì∏ –ú–µ–º", "üß© –û–±—â–µ–Ω–∏–µ", "üìù –ù–æ–≤–∞—è —Ä–æ–ª—å"):
        if text == "üì∏ –ú–µ–º":
            await message.answer("–ù–∞–ø–∏—à–∏: `–ú–µ–º: <—Ç–µ–º–∞>` ‚Äî –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é.")
        elif text == "üß© –û–±—â–µ–Ω–∏–µ":
            await message.answer("–ù–∞–ø–∏—à–∏: `–û–±—â–µ–Ω–∏e: <—Ç–µ–º–∞>`")
        else:
            await message.answer("–ù–∞–ø–∏—à–∏: `–†–æ–ª—å: <—Ä–æ–ª—å>`")
    else:
        await send_answer_tg(message)

# ======================== –ó–∞–ø—É—Å–∫ ===========================
async def main():
    try:
        await dp.start_polling(bot_tg)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP‚Äë—Å–µ—Å—Å–∏—é –±–æ—Ç–∞ (graceful shutdown)
        await bot_tg.session.close()

if __name__ == "__main__":
    asyncio.run(main())
